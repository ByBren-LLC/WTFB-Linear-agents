/**
 * Type definitions for Autonomous Behaviors (LIN-59)
 * 
 * Defines the interfaces and types for the proactive agent action system.
 */

import { IssueContext } from './command-types';

/**
 * Types of triggers that can activate autonomous behaviors
 */
export enum BehaviorTriggerType {
  WEBHOOK = 'webhook',
  SCHEDULE = 'schedule',
  COMMAND_COMPLETION = 'command_completion',
  MANUAL = 'manual',
  SYSTEM = 'system'
}

/**
 * Context information for behavior execution
 */
export interface BehaviorContext {
  /** Issue being processed (if applicable) */
  issue?: any;
  
  /** Previous state of the issue (for change detection) */
  previousState?: any;
  
  /** Team context */
  team?: {
    id: string;
    name: string;
    key: string;
  };
  
  /** User who triggered the behavior (if applicable) */
  user?: {
    id: string;
    name: string;
    email?: string;
  };
  
  /** Current PI information */
  currentPI?: string;
  
  /** Current iteration */
  currentIteration?: string;
  
  /** Type of trigger */
  triggerType?: BehaviorTriggerType | 'schedule';
  
  /** Additional context data */
  metadata?: Record<string, any>;
  
  /** Timestamp of the trigger */
  timestamp: Date;
}

/**
 * Trigger that initiates autonomous behavior
 */
export interface BehaviorTrigger {
  /** Type of trigger */
  type: BehaviorTriggerType;
  
  /** Payload data from the trigger */
  payload: any;
  
  /** Context for behavior execution */
  context: BehaviorContext;
  
  /** Timestamp when trigger was created */
  timestamp: Date;
  
  /** Unique identifier for tracking */
  id: string;
}

/**
 * Result from behavior execution
 */
export interface BehaviorResult {
  /** Whether the behavior executed successfully */
  success: boolean;
  
  /** Actions taken by the behavior */
  actions: BehaviorAction[];
  
  /** Any data generated by the behavior */
  data?: any;
  
  /** Error message if failed */
  error?: string;
  
  /** Execution duration in milliseconds */
  executionTime: number;
  
  /** Whether to notify users */
  shouldNotify: boolean;
  
  /** Notification details if applicable */
  notification?: BehaviorNotification;
}

/**
 * Action taken by an autonomous behavior
 */
export interface BehaviorAction {
  /** Type of action */
  type: 'comment' | 'status_change' | 'notification' | 'analysis' | 'suggestion' | 'update' | 'notify' | 'report';
  
  /** Target of the action (e.g., issue ID) */
  target: string;
  
  /** Description of the action */
  description: string;
  
  /** Result of the action */
  result: 'success' | 'failed' | 'skipped';
  
  /** Additional action data */
  data?: any;
}

/**
 * Notification to send based on behavior execution
 */
export interface BehaviorNotification {
  /** Notification channels */
  channels: ('linear' | 'slack' | 'email')[];
  
  /** Recipients */
  recipients: string[];
  
  /** Notification title */
  title: string;
  
  /** Notification message */
  message: string;
  
  /** Priority level */
  priority: 'low' | 'medium' | 'high' | 'critical';
  
  /** Additional data for the notification */
  data?: any;
}

/**
 * Base interface for all autonomous behaviors
 */
export interface AutonomousBehavior {
  /** Unique identifier for the behavior */
  id: string;
  
  /** Human-readable name */
  name: string;
  
  /** Description of what the behavior does */
  description: string;
  
  /** Whether the behavior is enabled */
  enabled: boolean;
  
  /** Priority for execution order */
  priority: number;
  
  /**
   * Determine if this behavior should trigger
   */
  shouldTrigger(context: BehaviorContext): Promise<boolean>;
  
  /**
   * Execute the behavior
   */
  execute(context: BehaviorContext): Promise<BehaviorResult>;
  
  /**
   * Validate the behavior can execute in current environment
   */
  validate?(): Promise<boolean>;
}

/**
 * Configuration for behavior scheduling
 */
export interface BehaviorSchedule {
  /** Behavior ID to schedule */
  behaviorId: string;
  
  /** Cron expression for scheduling */
  cronExpression?: string;
  
  /** Fixed interval in milliseconds */
  interval?: number;
  
  /** Specific times to run (ISO strings) */
  fixedTimes?: string[];
  
  /** Whether schedule is active */
  active: boolean;
  
  /** Context to provide when triggered */
  context?: Partial<BehaviorContext>;
}

/**
 * Health status for autonomous behaviors
 */
export interface BehaviorHealthStatus {
  /** Behavior ID */
  behaviorId: string;
  
  /** Whether behavior is healthy */
  healthy: boolean;
  
  /** Last successful execution */
  lastSuccess?: Date;
  
  /** Last failed execution */
  lastFailure?: Date;
  
  /** Success rate (0-1) */
  successRate: number;
  
  /** Average execution time in ms */
  avgExecutionTime: number;
  
  /** Total executions */
  totalExecutions: number;
  
  /** Any current issues */
  issues: string[];
}

/**
 * Configuration for autonomous behaviors
 */
export interface BehaviorConfiguration {
  /** Story point threshold for decomposition suggestions */
  storyPointThreshold: number;
  
  /** ART readiness threshold for alerts */
  artReadinessThreshold: number;
  
  /** Enable/disable specific behaviors */
  enabledBehaviors: Record<string, boolean>;
  
  /** Notification settings */
  notifications: {
    /** Send Slack notifications */
    slackEnabled: boolean;
    
    /** Default Slack channel */
    slackChannel?: string;
    
    /** Send email notifications */
    emailEnabled: boolean;
    
    /** Default email recipients */
    emailRecipients?: string[];
  };
  
  /** Rate limiting settings */
  rateLimits: {
    /** Max behaviors per minute */
    maxPerMinute: number;
    
    /** Max behaviors per hour */
    maxPerHour: number;
    
    /** Max comments per issue per day */
    maxCommentsPerIssue: number;
  };
}

/**
 * Metrics for behavior execution
 */
export interface BehaviorMetrics {
  /** Total behaviors executed */
  totalExecutions: number;
  
  /** Successful executions */
  successfulExecutions: number;
  
  /** Failed executions */
  failedExecutions: number;
  
  /** Average execution time */
  avgExecutionTime: number;
  
  /** Behaviors by type */
  byType: Record<string, number>;
  
  /** Actions taken */
  actionsTaken: Record<string, number>;
  
  /** Notifications sent */
  notificationsSent: number;
  
  /** Time period for metrics */
  period: {
    start: Date;
    end: Date;
  };
}